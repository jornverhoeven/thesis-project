package tech.jorn.adrian.risks.rules.cves;

import tech.jorn.adrian.core.graphs.knowledgebase.KnowledgeBase;
import tech.jorn.adrian.core.graphs.knowledgebase.KnowledgeBaseEntry;
import tech.jorn.adrian.core.graphs.knowledgebase.KnowledgeBaseNode;
import tech.jorn.adrian.core.graphs.knowledgebase.KnowledgeBaseSoftwareAsset;
import tech.jorn.adrian.core.properties.AbstractProperty;
import tech.jorn.adrian.core.risks.Risk;
import tech.jorn.adrian.core.risks.RiskEdge;
import tech.jorn.adrian.risks.validators.PropertyValidator;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;

public class FirmwareVulnerabilityCve extends CveRule<String> {

    private boolean nodeToSoftware = true;

    public FirmwareVulnerabilityCve(String cve, String sdk, PropertyValidator<String> validator, float exploitabilityScore) {
        super(cve, "firmware-" + sdk + "-version", validator, exploitabilityScore, Float.MAX_VALUE, Float.MAX_VALUE);
    }

    public FirmwareVulnerabilityCve fromNodeToSoftware() {
        this.nodeToSoftware = true;
        return this;
    }

    public FirmwareVulnerabilityCve fromSoftwareToNode() {
        this.nodeToSoftware = false;
        return this;
    }

    @Override
    public void evaluate(KnowledgeBase knowledgeBase, Consumer<RiskEdge> attackGraph) {
        List<KnowledgeBaseEntry<?>> nodes = new ArrayList<>();

        knowledgeBase.getNodes().forEach(node -> {
            if (this.nodeToSoftware && node instanceof KnowledgeBaseSoftwareAsset) nodes.add(node);
            else if (!this.nodeToSoftware && node instanceof KnowledgeBaseNode) nodes.add(node);
        });

        nodes.forEach(node -> {
            var parents = knowledgeBase.getParents(node);
            parents.forEach(parent -> {
                if (this.nodeToSoftware) {
                    if (node instanceof KnowledgeBaseNode) return;
                } else {
                    if (node instanceof KnowledgeBaseSoftwareAsset) return;
                }

                var property = parent.getProperty(this.getProperty());
                if (property.isEmpty()) return;

                var isVulnerable = this.validator.validate((String) property.get());
                if (!isVulnerable) return;

                var risk = new Risk(this.getCve(), this.getExploitabilityScore() / 10, false, this);
                attackGraph.accept(new RiskEdge(parent, node, risk));
            });
        });
    }
}
